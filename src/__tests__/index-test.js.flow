/**
 * @flow
 */

import {validate as validateJSON5} from '../json5';
import * as s from '../schema';

export function testObject() {
  let schema = s.object({
    name: s.string,
    age: s.number,
  });

  let value = validateJSON5(schema, '{name: "John", age: 27}');

  let name: string = value.name;
  let age: number = value.age;

  // $ExpectError: expected string
  let name: number = value.name;

  // $ExpectError: unknown prop
  value.x;
}

export function testSequence() {
  let schema = s.sequence(s.object({a: s.string}));

  let value = validateJSON5(schema, '[{a: "hello"}]');

  let item = value[0];

  let a: string = item.a;

  // $ExpectError: expected a string
  let a: number = item.a;

  // $ExpectError: unknown prop
  let b: string = item.b;
}

export function testOneOf() {
  let schema = s.oneOf(s.string, s.number);

  let value = validateJSON5(schema, '"hello"');

  let hello: string | number = value;

  // $ExpectError: expected a string or a number
  let v: boolean = value;
}

export function testRefine() {
  class A { }

  let schema = s.oneOf(s.string).andThen(_v => new A());

  let value = validateJSON5(schema, '');

  let v: A = value;

  // $ExpectError: expected an A
  let ve: boolean = value;
}

export function testMaybe() {
  let schema = s.maybe(s.number);

  let value = validateJSON5(schema, '');

  let v: ?number = value;

  // $ExpectError: incompat w/ ?number
  let v_: number = value;
}

export function testRecur() {

  let person = s.recur(person =>
    s.object({
      name: s.string,
      age: s.number,
      friends: s.arrayOf(person),
    })
  );

  type Person = {
    name: string,
    age: number,
    friends: Person[],
  };

  let x = validateJSON5(person, '');

  (x: Person);
  (x.name: string);
  (x.age: number);
  (x.friends: Person[]);

  // $ExpectError: oops
  x.oops;
}
